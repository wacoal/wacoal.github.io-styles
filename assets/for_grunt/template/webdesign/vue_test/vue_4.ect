<% block 'title': %>
vue_1
<% end %>

<% block 'css': %>
<!--<link type="text/css" rel="stylesheet" href="/common/css/vue_1.css" media="screen" />-->
<script type="text/javascript" src="/common/js/lib/vue.min.js"></script>
<script type="text/javascript" src="/common/js/lib/vue-resource.js"></script>
<style>
.display-none {
  display: none;
}
</style>
<% end %>

<% extend 'partials/layout_jquery.ect' %>

<div id="app">
  <form id="form" v-on:submit="addEvent">
    <!-- それぞれに作ったvaidatorに通す -->
    <p>title:<input v-model="newEvent.title | titleValidator"></p>
    <p>description:<input v-model="newEvent.description | descriptionValidator"></p>
    <p>data:<input v-model="newEvent.date | dateValidator"></p>
    <p>location:<input v-model="newEvent.location | locationValidator"></p>
    <input type="submit" value="Add event">
  </form>
  <!-- error表示欄 -->
  <ul id="errors" class="display-none">
    <li v-show="!validation.title">title cannot be empty.</li>
    <li v-show="!validation.description">description cannot be empty.</li>
    <li v-show="!validation.date">date cannot be empty.</li>
    <li v-show="!validation.location">location cannot be empty.</li>
  </ul>
</div>


<script type="text/javascript">
var add = new Vue({

// element to mount to
el: '#app',

// initial data
data: {
users: [],
newEvent: {
  title: '',
  description: '',
  date: '',
  location: ''
},
validation: {
  title: false,
  description: false,
  date: false,
  location: false
}
},

// validation 個別に作っているので、評価の仕方を変えられる
filters: {
titleValidator: {
  write: function (val) {
    this.validation.title = !!val
    return val
  }
},
descriptionValidator: {
  write: function (val) {
    this.validation.description = !!val
    return val
  }
},
dateValidator: {
  write: function (val) {
    this.validation.date = !!val
    return val
  }
},
locationValidator: {
  write: function (val) {
    this.validation.location = !!val
    return val
  }
}
},

// computed property for form validation state
computed: {
isValid: function () {
  var valid = true
  for (var key in this.validation) {
    if (!this.validation[key]) {
      valid = false
    }
  }
  return valid
}
},

// methods
methods: {
  addEvent: function (e) {
    document.getElementById("errors").className = ""
    e.preventDefault()
    if (this.isValid) {
      console.log("success")
      console.log("title: " + this.newEvent.title)
      console.log("description: " + this.newEvent.description)
      console.log("date: " + this.newEvent.date)
      console.log("location: " + this.newEvent.location)

      // POST
        this.$http.post('http://example.com/forPOST', this.newEvent, function (data, status, request) {
          console.log("post success")
          //status check
          console.log(status)


          }).error(function (data, status, request) {
            console.log("post failed")
          })

    }else{
      console.log("need edit")
    }
  },
}
})
</script>
